#pragma kernel Density
#include "/includes/FastNoise.compute"
#include "/includes/TerraDensity.compute"
#include "/includes/TerraCell.compute"

struct TerraObjective
{
    float3 position;
    float groundHeight;
};

StructuredBuffer<TerraNoise> noises;
StructuredBuffer<float3> positions;

RWStructuredBuffer<TerraObjective> objectives;

static const int numHeights = 2;
static const int numObjectives = 5;
static const int heightIndices[numHeights] = {0, 1};
static const int indexBiomeActivate = 2;

float seaLevel;

int seed;

// ---------------------------------------------------

float sampleNoise(float x, float y, TerraNoise noise)
{
    FNSetSeed(noise.seed);
    FNSetFrequency(noise.frequency);

    FNSetFractalType(noise.fractalType); // 0 is fbm, 1 is billow, 2 is ridged
    FNSetFractalOctaves(noise.fractalOctaves);
    FNSetFractalLacunarity(noise.fractalLacunarity);
    FNSetFractalGain(noise.fractalGain);

    if (noise.noiseType == 0)
    {
        // simplex
        if (noise.isFractal != 0)
        {
            return FNGetSimplexFractal(x, y);
        } else
        {
            return FNGetSimplex(x, y);
        }
    } else if (noise.noiseType == 1)
    {
        // perlin
        if (noise.isFractal != 0)
        {
            return FNGetPerlinFractal(x, y);
        } else
        {
            return FNGetPerlin(x, y);
        }
    } else if (noise.noiseType == 2)
    {
        // cubic
        if (noise.isFractal != 0)
        {
            return FNGetCubicFractal(x, y);
        } else
        {
            return FNGetCubic(x, y);
        }
    } else if (noise.noiseType == 3)
    { 
        // value
        if (noise.isFractal != 0)
        {
            return FNGetValueFractal(x, y);
        } else
        {
            return FNGetValue(x, y);
        }
    }
    return 0;
}
float getHeightForNoise(float x, float z, TerraNoise noise)
{
    float val = sampleNoise(x, z, noise);
    return seaLevel + noise.offset + val*noise.weight;
}
float getHeight(float3 pos)
{
    float heights[numHeights] = {0,0};
    for (int i = 0; i < numHeights; i++)
    {
        int idx = heightIndices[i];
        heights[i] = getHeightForNoise(pos.x, pos.z, noises[idx]);
    }
    
    TerraNoise noiseActivate = noises[indexBiomeActivate];
    float a = sampleNoise(pos.x, pos.z, noiseActivate);
    a = (a + 1.0)/2.0;
    float interval = 1.0/(uint)numHeights;
    float blendThreshold = interval * 0.3;

    int primaryNoiseIndex = (int)(a/interval);
    float primaryNoiseStart = interval*primaryNoiseIndex;
    float distanceToEdge = min(a - primaryNoiseStart, (primaryNoiseStart + interval) - a);

    int secondaryNoiseIndex;
    if (a - primaryNoiseStart < interval / 2.0) {
        secondaryNoiseIndex = primaryNoiseIndex - 1 < 0 ? numHeights - 1 : primaryNoiseIndex - 1;
    } else {
        secondaryNoiseIndex = (primaryNoiseIndex + 1) % (uint)numHeights;
    }

    float groundHeight = heights[primaryNoiseIndex];
    float heightOffsetBase = noises[heightIndices[primaryNoiseIndex]].offset;

    if (distanceToEdge < blendThreshold && noises[heightIndices[primaryNoiseIndex]].id >= noises[heightIndices[secondaryNoiseIndex]].id)
    {
        float blendFactor = distanceToEdge / blendThreshold;

        groundHeight = lerp(heights[secondaryNoiseIndex], heights[primaryNoiseIndex], blendFactor);

        heightOffsetBase = lerp(noises[heightIndices[secondaryNoiseIndex]].offset, 
            noises[heightIndices[primaryNoiseIndex]].offset, blendFactor);
    } 

    return groundHeight;
}

// ---------------------------------------------------

[numthreads(numObjectives,1,1)]
void Density (int3 id : SV_DispatchThreadID)
{
    if (id.x >= numObjectives) {
        return;
    }

    float3 pos = positions[id.x];

    TerraObjective objective;
    objective.position = pos;
    objective.groundHeight = getHeight(pos);
    
    objectives[id.x] = objective;
}
